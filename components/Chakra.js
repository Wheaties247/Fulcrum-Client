//component formated with word wrap for compactness
"use strict"
// Defines that JavaScript code should be executed in "strict mode"

import React, { Component } from "react";
import { Text, View, TouchableOpacity, StyleSheet } from "react-native";
import LinearGradient from 'react-native-linear-gradient';
//Import all components, assests, and packages used on this file



class Chakra extends Component {
  //initialize component

	constructor(props){
		super(props);
    //initialize constructor with props from React.Component

		// this.getLinearGradient = this.getLinearGradient.bind(this);
		  // Binds above method so any instances of the word "this" within each method refers to the current component even if it is called by another component
	}
	getLinearGradient(chakra){
		//getLinearGradient method takes one string argument
		switch (chakra) {
      // switch statement takes chakra as Parameter and return respective array
			case "crown":
				return [ "rgb(206, 72, 240)","rgb(167, 21, 188)"]
      break;

			case "third":
				return ["rgb(74, 138, 212)", "rgb(34, 109, 190)"]
      break;

			case "heart":
				return ["rgb(27, 222, 40)",  "rgb(0, 186, 10)"]
      break;

			case "throat":
				return [ "rgb(113,191, 228)","rgb(153, 207, 235)"]
      break;

			case "sacral":
				return ["rgb(248, 181, 63)", "rgb(245, 187, 88)"]
      break;

			case "root":
				return ["rgb(255, 87, 81)", "rgb(249, 64, 59)"]
      break;

			case "power":
				return ["rgb(224, 230, 33)", "rgb(213, 225, 0)"]
      break;

		}
		//call inside linear gradent color prop passing in children.props.chakra 
	}

	render(){
      //render method returns components to be displayed by current component

	const {touchableOpacityStyle, viewStyle} = styles;
	const {showChakra, children , getBackgroundColor} = this.props;
    //deconstructs respective values from respective variables

	return(
		<TouchableOpacity 
			onPress={()=>showChakra(children.props.chakra)}>
			{/* 
    render TouchableOpacity component that calls showChakra from props and passes children.props.chakra as arguement when component is clicked
    */}
			<LinearGradient 
				colors={this.getLinearGradient(children.props.chakra)} 
				style = {touchableOpacityStyle} >
				{/* 
    LinearGradient component takes an array of rgb values (generated by getLinearGradient) to create a gradient from one color to the next with respective style prop passed in
    */}
					<View style = {viewStyle}>
					{children}
					{/* 
				    within View component renderthe children of the Chakra Component
				    and TextWithLetterSpacing component to emulate word padding 
			   	 with respective style props
				    */}
					</View>
			</LinearGradient>
		</TouchableOpacity>
		);
	}
}

const styles = StyleSheet.create({
	touchableOpacityStyle:{
		marginTop: 20, 
		marginBottom: 20,
		marginLeft: 10,
		marginRight: 10,
		borderRadius: 175,
		padding:3,
		width:350,
		height: 350,
		justifyContent:'center',
		alignItems:'center',
		borderWidth:.25,
	},
	viewStyle:{
		// width: '100%'
	}
});
//Creates styles variable through StyleSheet.create to reduce the strain on the bridge


export default Chakra;
//exports component to be used outside this file

